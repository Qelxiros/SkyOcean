<?xml version="1.0" ?>
<SmellBaseline>
  <ManuallySuppressedIssues/>
  <CurrentIssues>
    <ID>ClassOrdering:AccessoryBagItemSource.kt$AccessoryBagItemContext$override val source = ItemSources.ACCESSORY_BAG</ID>
    <ID>ClassOrdering:AccessoryBagItemSource.kt$AccessoryBagItemSource$override val type = ItemSources.ACCESSORY_BAG</ID>
    <ID>ClassOrdering:BlockTagKey.kt$BlockTagKey$override val key: TagKey&lt;Block&gt; = TagKey.create(Registries.BLOCK, SkyOcean.id(path))</ID>
    <ID>ClassOrdering:Buttons.kt$ButtonConfig$constructor(itemLike: ItemLike, command: String, @Language("RegExp") title: String, tooltip: String = "") : this(itemLike.id.toString(), command, title, tooltip)</ID>
    <ID>ClassOrdering:ChestItemSource.kt$ChestItemSource$override val type = ItemSources.CHEST</ID>
    <ID>ClassOrdering:ChestTracker.kt$ChestTracker$private val Slot.savableIndex get() = this.index % 27</ID>
    <ID>ClassOrdering:CodecHelpers.kt$CodecHelpers$fun &lt;T&gt; copyOnWriteList(original: Codec&lt;T&gt;): Codec&lt;CopyOnWriteArrayList&lt;T&gt;&gt;</ID>
    <ID>ClassOrdering:CompoundPatch.kt$CompoundPatch$Companion</ID>
    <ID>ClassOrdering:CraftHelperStorage.kt$CraftHelperStorage$val data get() = storage.get()</ID>
    <ID>ClassOrdering:CrystalHollowsBB.kt$CrystalHollowsBB$private fun create(pos1: Vec3i, pos2: Vec3i): BoundingBox</ID>
    <ID>ClassOrdering:DataStorage.kt$DataStorage$Companion</ID>
    <ID>ClassOrdering:DataStorage.kt$DataStorage$constructor(defaultData: () -&gt; T, fileName: String, codec: Codec&lt;T&gt;) : this(0, defaultData, fileName, { codec })</ID>
    <ID>ClassOrdering:DataStorage.kt$DataStorage$fun get(): T</ID>
    <ID>ClassOrdering:DataStorage.kt$DataStorage$fun save()</ID>
    <ID>ClassOrdering:DataStorage.kt$DataStorage.Companion$val defaultPath: Path = McClient.config.resolve("skyocean/data")</ID>
    <ID>ClassOrdering:DwarvenMinesBB.kt$DwarvenMinesBB$private fun create(pos1: Vec3i, pos2: Vec3i): BoundingBox</ID>
    <ID>ClassOrdering:ForgeItemSource.kt$ForgeItemSource$override val type = ItemSources.FORGE</ID>
    <ID>ClassOrdering:Ingredients.kt$CurrencyIngredient$override fun withAmount(amount: Int): Ingredient</ID>
    <ID>ClassOrdering:Ingredients.kt$IngredientType.Companion$@IncludedCodec val ITEM_LIKE: Codec&lt;ItemLikeIngredient&gt; = SkyOceanCodecs.IngredientCodec.codec().xmap({ it as ItemLikeIngredient }, { it })</ID>
    <ID>ClassOrdering:InventoryItemSource.kt$InventoryItemSource$override val type = ItemSources.INVENTORY</ID>
    <ID>ClassOrdering:InventoryRenderer.kt$InventoryRenderer$actual fun renderMonoInventory(graphics: GuiGraphics, x: Int, y: Int, width: Int, height: Int, size: Int, orientation: Orientation, color: Int)</ID>
    <ID>ClassOrdering:InventoryRenderer.kt$InventoryRenderer$private fun drawTexture( graphics: GuiGraphics, x: Int, y: Int, width: Int, height: Int, color: Int = -1, texture: GpuTexture )</ID>
    <ID>ClassOrdering:InventoryRenderer.kt$InventoryRenderer$private inline fun cacheShaderToTexture( name: String, pipeline: RenderPipeline, property: KMutableProperty0&lt;GpuTexture?&gt;, width: Int, height: Int, color: Int, setup: RenderPass.() -&gt; Unit )</ID>
    <ID>ClassOrdering:ItemContext.kt$ItemContext$val source: ItemSources</ID>
    <ID>ClassOrdering:ItemHighlighter.kt$ItemHighlighter$private val backpack = Regex("Backpack Slot (\\d+)")</ID>
    <ID>ClassOrdering:ItemHighlighter.kt$ItemHighlighter$private val enderchest = Regex("Ender Chest Page (\\d)")</ID>
    <ID>ClassOrdering:ItemSource.kt$ItemSource$val type: ItemSources</ID>
    <ID>ClassOrdering:MovePatch.kt$MovePatch$Companion</ID>
    <ID>ClassOrdering:MuseumItemSource.kt$MuseumItemContext$override val source = ItemSources.MUSEUM</ID>
    <ID>ClassOrdering:MuseumItemSource.kt$MuseumItemSource$override val type = ItemSources.MUSEUM</ID>
    <ID>ClassOrdering:Octree.kt$Octree$constructor(vararg boxes: BoundingBox) : this(listOf(*boxes))</ID>
    <ID>ClassOrdering:ProfileStorage.kt$ProfileStorage$Companion</ID>
    <ID>ClassOrdering:ProfileStorage.kt$ProfileStorage$private fun isCurrentlyActive()</ID>
    <ID>ClassOrdering:ProfileStorage.kt$ProfileStorage.Companion$inline val defaultPath: Path get() = DataStorage.defaultPath</ID>
    <ID>ClassOrdering:RecipeView.kt$CraftHelperContext$Companion</ID>
    <ID>ClassOrdering:RecipeVisitor.kt$RecipeVisitor$Companion</ID>
    <ID>ClassOrdering:RenderUtils.kt$RenderUtils$private val SLOT_HIGHLIGHT_BACK_SPRITE = ResourceLocation.withDefaultNamespace("container/slot_highlight_back")</ID>
    <ID>ClassOrdering:RenderUtils.kt$RenderUtils$private val SLOT_HIGHLIGHT_FRONT_TEXTURE = ResourceLocation.withDefaultNamespace("container/slot_highlight_front")</ID>
    <ID>ClassOrdering:SackData.kt$SackData$val data: List&lt;Sack&gt; = Utils.loadRepoData("sacks", CodecUtils::list)</ID>
    <ID>ClassOrdering:SackValueConfig.kt$SackValueConfig$override fun getTranslationKey(): String</ID>
    <ID>ClassOrdering:SacksItemSource.kt$SacksItemSource$override val type = ItemSources.SACKS</ID>
    <ID>ClassOrdering:SkyOceanItemId.kt$SkyOceanItemId$Companion</ID>
    <ID>ClassOrdering:SkyOceanItemId.kt$SkyOceanItemId.Companion$@IncludedCodec val CODEC: Codec&lt;SkyOceanItemId&gt; = Codec.STRING.xmap(::SkyOceanItemId, SkyOceanItemId::id)</ID>
    <ID>ClassOrdering:SkyOceanScreen.kt$SkyOceanScreen$private val zeroDelay = (-1).seconds.toJavaDuration()</ID>
    <ID>ClassOrdering:SkyblockTagKey.kt$SkyblockTagKey$operator fun contains(value: T): Boolean</ID>
    <ID>ClassOrdering:SkyblockTagKey.kt$SkyblockTagKey$val location: ResourceLocation</ID>
    <ID>ClassOrdering:StorageItemSource.kt$StorageItemSource$override val type = ItemSources.STORAGE</ID>
    <ID>ClassOrdering:StoragePreview.kt$StoragePreview$private var storageInstance: PlayerStorageInstance? = null</ID>
    <ID>ClassOrdering:TrackedItemBundle.kt$BundledItemContext$override val source = ItemSources.BUNDLE</ID>
    <ID>ClassOrdering:VaultItemSource.kt$VaultItemSource$override val type = ItemSources.VAULT</ID>
    <ID>ClassOrdering:WardrobeItemSource.kt$WardrobeItemSource$override val type = ItemSources.WARDROBE</ID>
    <ID>ClassOrdering:pip.kt$MonoInventoryPipState$override val shrinkToScissor: Boolean = false</ID>
    <ID>ClassOrdering:pip.kt$PolyInventoryPipState$override val shrinkToScissor: Boolean = false</ID>
    <ID>ClassOrdering:uniforms.kt$MonoInventoryUniform$Companion</ID>
    <ID>ClassOrdering:uniforms.kt$PolyInventoryUniform$Companion</ID>
    <ID>EmptyFunctionBlock:ButtonConfigScreen.kt$ButtonConfigScreen${ }</ID>
    <ID>EmptyFunctionBlock:ButtonConfigScreen.kt$ButtonConfigScreen${}</ID>
    <ID>EmptyFunctionBlock:SkyOceanModelProvider.kt$SkyOceanModelProvider${}</ID>
    <ID>ExplicitItLambdaParameter:SkyOceanFontProvider.kt${ it -&gt; it.group( GlyphProviderDefinition.MAP_CODEC.codec().listOf().fieldOf("providers").forGetter { it }, ).apply(it) { it } }</ID>
    <ID>Filename:const.kt$me.owdding.skyocean.helpers.const.kt</ID>
    <ID>Filename:pip.kt$me.owdding.skyocean.utils.rendering.pip.kt</ID>
    <ID>Filename:uniforms.kt$me.owdding.skyocean.utils.rendering.uniforms.kt</ID>
    <ID>FunctionNaming:EntityHelper.kt$EntityAccessor$fun `ocean$getNameTagScale`(): Float</ID>
    <ID>FunctionNaming:EntityHelper.kt$EntityAccessor$fun `ocean$glowTime`(time: Long)</ID>
    <ID>FunctionNaming:EntityHelper.kt$EntityAccessor$fun `ocean$setGlowingColor`(color: Int)</ID>
    <ID>FunctionNaming:EntityHelper.kt$EntityAccessor$fun `ocean$setGlowing`(glowing: Boolean)</ID>
    <ID>FunctionNaming:EntityHelper.kt$EntityAccessor$fun `ocean$setNameTagScale`(scale: Float)</ID>
    <ID>FunctionNaming:EntityHelper.kt$EntityRenderStateAccessor$fun `ocean$getNameTagScale`(): Float</ID>
    <ID>FunctionNaming:EntityHelper.kt$EntityRenderStateAccessor$fun `ocean$setNameTagScale`(scale: Float)</ID>
    <ID>FunctionNaming:NpcRecipeParser.kt$NpcRecipeParser$@Subscription @OnlyOnSkyBlock private fun ScreenMouseClickEvent.Pre()</ID>
    <ID>ImportOrdering:GlassPaneFactory.kt$import me.owdding.skyocean.datagen.models.BlockModelFactory import me.owdding.skyocean.datagen.models.ModelGenContext import net.minecraft.client.data.models.BlockModelGenerators import net.minecraft.client.data.models.BlockModelGenerators.Y_ROT_270 import net.minecraft.client.data.models.BlockModelGenerators.Y_ROT_90 import net.minecraft.client.data.models.blockstates.MultiPartGenerator import net.minecraft.client.data.models.model.ModelTemplates import net.minecraft.client.data.models.model.TextureMapping import net.minecraft.resources.ResourceLocation import net.minecraft.world.level.block.Block import net.minecraft.world.level.block.Blocks import net.minecraft.world.level.block.StainedGlassPaneBlock import net.minecraft.world.level.block.state.properties.BlockStateProperties</ID>
    <ID>LongMethod:CraftHelperDisplay.kt$CraftHelperDisplay$private fun visualize(tree: ContextAwareRecipeTree, output: ItemLikeIngredient, callback: () -&gt; ((save: Boolean) -&gt; Unit)): AbstractWidget</ID>
    <ID>LongMethod:ItemSearchScreen.kt$ItemSearchScreen$override fun init()</ID>
    <ID>LongMethod:SourceToWidget.kt$SourceToWidget$fun CalculationEntry.asWidget(callback: () -&gt; Unit): LayoutElement</ID>
    <ID>LongMethod:TreeFormatter.kt$TreeFormatter$fun append(state: CraftHelperState, widget: WidgetBuilder, widgetConsumer: (AbstractWidget) -&gt; Unit, depth: Int = 0, prefix: String = "")</ID>
    <ID>MemberNameEqualsClassName:Buttons.kt$Buttons$val buttons get() = arrayOf( button0, button1, button2, button3, button4, button5, button6, button7, button8, button9, button10, button11, button12, button13, )</ID>
    <ID>MemberNameEqualsClassName:FakeBlocks.kt$FakeBlocks$val fakeBlocks = mutableMapOf&lt;Block, MutableList&lt;FakeBlockEntry&gt;&gt;()</ID>
    <ID>PrintStackTrace:DataStorage.kt$DataStorage$e</ID>
    <ID>PrintStackTrace:ProfileStorage.kt$ProfileStorage$e</ID>
    <ID>ReturnCount:SkyOceanItemId.kt$SkyOceanItemId.Companion$fun unknownType(input: String): SkyOceanItemId?</ID>
    <ID>SpacingAroundColon:FakeBlockModel.kt$FakeBlockModel$:</ID>
    <ID>SpacingAroundColon:InventoryRenderer.kt$InventoryRenderer$:</ID>
    <ID>SpacingAroundColon:MuseumDonationHelper.kt$MuseumDonationHelper$:</ID>
    <ID>SpacingAroundColon:Utils.kt$Utils$:</ID>
    <ID>SpreadOperator:CombinedSuggestionProvider.kt$CombinedSuggestionProvider$(*futures.toTypedArray())</ID>
    <ID>SpreadOperator:Octree.kt$Octree$(*boxes)</ID>
    <ID>SpreadOperator:PngHolder.kt$PngHolder$( *toSave.map { (path, data, hash) -&gt; println(path) CompletableFuture.runAsync { output.writeIfNeeded(provider.file(path, "png"), data, hash) } }.toTypedArray(), )</ID>
    <ID>TopLevelPropertyNaming:MobTypesFontProvider.kt$const val backgroundHeight = 7</ID>
    <ID>TopLevelPropertyNaming:MobTypesFontProvider.kt$const val fontHeight = 5</ID>
    <ID>TopLevelPropertyNaming:MobTypesFontProvider.kt$const val fontWidth = 5</ID>
    <ID>UnusedParameter:IngredientParser.kt$IngredientParser$regex: Regex</ID>
    <ID>UnusedParameter:OctreeDebugRenderer.kt$OctreeDebugRenderer$depth: Int</ID>
    <ID>UnusedParameter:OctreeDebugRenderer.kt$OctreeDebugRenderer$nodesRendered: MutableInt</ID>
  </CurrentIssues>
</SmellBaseline>
